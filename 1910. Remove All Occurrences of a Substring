One built in approach :- (NOT FOR INTERVIEW)

class Solution {
    public String removeOccurrences(String s, String part) {
        while(s.contains(part)){
            s = s.replaceFirst(part, "");
        }
        return s;
    }

Time : O(n2) contains and replace takes O(n)
Space : O(n) new string created each time.

Stack Approach :

class Solution {
    public String removeOccurrences(String s, String part) {
        Stack<Character> stack = new Stack<>();
        int j = part.length()-1;
        String toBeRemoved = "";
        for(int i=0; i < s.length(); i++){
            stack.push(s.charAt(i));
            j = part.length()-1;
            toBeRemoved = "";
            while(! stack.isEmpty() && j >= 0 && stack.peek() == part.charAt(j)){
                toBeRemoved += stack.pop();
                j--;
            }
            if(j >= 0){
                for(int k=toBeRemoved.length()-1; k >= 0; k--){
                   stack.push(toBeRemoved.charAt(k));
                }
            }
        }
        StringBuilder result = new StringBuilder();
        while(! stack.isEmpty()){
            result.append(stack.pop());
        }
        return result.reverse().toString();
    }
}

Time : O(n.m)
n -> for loop and m -> while loop and for loop for part

Space : O(n.m)  stack -> n stores all chars if no part and m -> toBeRemoved string
