class TrieNode{
    public TrieNode[] children;
    public boolean endOfWord = false;
    private final int R = 26;
    TrieNode(){
        this.children = new TrieNode[R];
    } 
}


class Trie {

    private TrieNode root = new TrieNode();

    public Trie() {
        
    }
    
    public void insert(String word) {
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            if(curr.children[c-'a'] == null){
                curr.children[c-'a'] = new TrieNode();
            }
            curr = curr.children[c-'a'];
        }
        curr.endOfWord = true;
    }
    
    public boolean search(String word) {
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            if(curr.children[c-'a'] == null)
                return false;
            curr = curr.children[c-'a'];
        }  
        return curr.endOfWord;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode curr = root;
        for(char c : prefix.toCharArray()){
            if(curr.children[c-'a'] == null)
                return false;
            curr = curr.children[c-'a'];
        } 
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */


Insertion:
Time : O(m)  iterate thorugh all the keys
Space : O(m)  new node created for all the keys

Search
Time : O(m)
Space : O(1)

search Prefix
Time : O(m)
Space : O(1)
