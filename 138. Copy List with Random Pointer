/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
           return null;
        Node curr = head;
        while(curr != null){
            Node next = curr.next;
            Node n = new Node(curr.val);
            curr.next = n;
            n.next = next;
            curr = curr.next.next;
        }
        curr = head;
        while(curr != null){
            if(curr.random != null)
                curr.next.random = curr.random.next;
            curr = curr.next.next;
        }
        Node original = head, copy = head.next;
        Node newHead = copy;
        while(original != null && copy != null){
            original.next = copy.next;
            original = original.next;
            if(original != null)
                copy.next = original.next;
            copy = copy.next;
        } 
        return newHead; 
    }
}

// Time : O(n), space -> O(1) extra space
