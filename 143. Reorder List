/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode prev = null;
    public void reorderList(ListNode head) {
        if(head == null || head.next == null)
            return;
        ListNode l1 = head;
        ListNode mid = findMid(head);
        prev.next = null;
        ListNode l2 = reverse(mid);
        ListNode result = new ListNode(0);
        ListNode curr = result;
        while(l1 != null && l2 != null){
            curr.next = l1;
            curr = curr.next;
            l1 = l1.next;
            curr.next = l2;
            curr = curr.next;
            l2 = l2.next;
        }
        if(l1 != null){
            curr.next = l1;
        }
        if(l2 != null){
            curr.next = l2;
        }
        head = result.next;
    }
    public ListNode findMid(ListNode head){
        ListNode fast = head, slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            prev = slow;
            slow = slow.next;
        }
        return slow;
    }
    public ListNode reverse(ListNode head){
        ListNode prev = null, curr=head;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}

Time : O(n)
Space : O(1)
