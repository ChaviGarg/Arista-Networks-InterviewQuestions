/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
   
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode successor = null;
        while(root != null){
            if(p.val >= root.val){
               root = root.right;
            }else{
                successor = root;
                root = root.left;
            }
        }
        return successor;
    }
    
}


Time Complexity: O(N) since we might end up encountering a skewed tree and in that case, we will just be discarding one node at a time. For a balanced binary search tree, however, the time complexity will be O(logN) which is what we usually find in practice.

Space Complexity: O(1) since we don't use recursion or any other data structures for getting our successor.
