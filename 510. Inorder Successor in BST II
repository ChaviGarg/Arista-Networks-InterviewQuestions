/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    public Node inorderSuccessor(Node node) {
        if(node.right != null){
            node = node.right;
            while(node.left != null){
                node = node.left;
            }
            return node;
        }else{
            while(node.parent != null && node.parent.val < node.val){
                node = node.parent;
            }
            return node.parent;
        }
    }
}

Complexity Analysis

Time complexity: O(H), where H is the height of the tree. That means O(logN) in the average case, and O(N) in the worst case, where N is the number of nodes in the tree.
Space complexity: O(1), since no additional space is allocated during the calculation.
